{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>R e p o r t</h1>

    <a href="{{ path('report') }}#kmom01">kmom01</a>

    <div id="kmom01">
        <p>Här är min redovisningstext för kmom01: ramverk</p>

        <p>
            Jag har tidigare läst kursen 'Algoritmer och datastrukturer med objektorienterad Python' där jag bland annat fick lära mig att angripa ett problem på ett objektorienterat sätt samt designprinciper för att utveckla objektoerienterade program.
            Den kursen uppfattade jag personligen som avancerad.
        </p>

        <p>
            PHPs modell för klasser och objekt använder sig av objektorienterad programmering.
            Grunderna man behöver ha koll på för att kunna komma igång och skapa sina första klasser är:
            1. Konstruktor; Den används för att initilaisera objektets egenskaper när man skapar det. 
            Konstruktorn körs automatiskt när objektet skapas och den kan ta emot argument som parametrar vilka den använder för att sätta egenskaper.
            2. Egenskaper; Beskriver objektets tillstånd. Egenskaper representerar data som är unik för varje objekt och kan, som ovan nämnt, tilldelas värden från konstruktorn och/eller från objektets metoder.
            3. Metoder; Beskriver hur ett objekt beter sig. Metoder kan användas för att ändra på objektets egenskaper eller utföra andra saker som behövs för objektet, likt funktioner.
            4. Arv; Betyder att en klass kan ärva egenskaper och metoder från en annan klass. Detta gör att man, baserat på en grundklass, kan skapa mer specialiserade klasser.
        </p>

        <p>
            Strukturen som används till uppgiften me/report kan till en början bli väldigt överväldigande.
            Med tiden ser man dock att man oftast enbart jobbar i mapparna assets, public, src och templates.
            Nu i början är koden fortfarande lite svår, men jag hänger med ganska bra i flödet och hur allting kopplas samman.
        </p>

        <p>
            Med tanke på artikeln 'PHP The Right Way' är bland annat Composer och Autoloading viktiga delar som lyfts fram.
            Composer är en väldigt kraftfull pakethanterare som är mycket användbar vid hantering av beroenden.
            Den underlättaren även utvecklingen av applikationer i PHP.
            Autoloading gör att man på ett enklare ochh effektivare sätt kan utföra laddning av klassfiler utan manuell inkludering.
            Dessutom lyft vikten av att använda sig av objektorienterad programmering, som jag även under tidigare kurs förstått ger en möjlighet för att ha en strukturerad och lätt underhållbar kod.
            Det finns inte några särskilda områden som jag just nu känner att jag vill veta mer om.
        </p>

        <p>
            Min TIL för detta kmom är att jag har fått en bättre förståelse för hur jag kan koppla routes i PHP med twigfiler och på så sett visa något på en hemsida.
        </p>
    </div>

    <a href="{{ path('report') }}#kmom02">Kmom02</a>

    <div id="kmom02">
        <p>Här är min redovisningstext för kmom02</p>

        <p>
            Arv, engelska Inheritance, används när en klass tar över variabler och metoder från en annan klass.
            Klassen som ärver kallas oftast för barnklass och klassen den ärver ifrån kallas ofta förälderklass eller basklass.
            Genom arv kan kod återanvändas och därmed sker ingen upprepning utav liknande funktionalitet i flera klasser.
            I PHP implementeras arv med hjälp av 'extends'.
            <br>
            Komposition, engelska Composition, används när man kombinerar flera klasser till en ny klass.
            Detta görs genom att en klass tar emot andra objekt som en parameter i dess konstruktor.
            När det finns en svagare koppling kallas det aggregat.
            Komposition gör det möjligt att skapa specialiserade klasser ssom har specifika egenskaper och metoder som föräldrarklassen inte har.
            <br>
            Interface är en abstrakt samling av metoder som beskriver vad en klass kan göra, men den visar inte hur den gör det.
            Det ger alltså en definition av metoderna som finns i klassen utan implementationen.
            Detta öppnar upp möjligheten för att ändra implementationen utan att påverka Interface, det ger flexibilitet.
            <br>
            Trait är en funktion som gör det möjligt att återanvända kod mellan klasser, ett sätt att dela funktionalitet utan arv.
            I PHP implementeras trait med hjälp av 'trait' namnpåtrait och sedan koden.
            Trait inkluderas med hjälp av 'use' och den fungerar såsom om koden hade varit skriven direkt i klassen.
        </p>

        <p>
            Jag började med att implementera klasserna Card, CardHand, DeckOfCards och DeckOfCardsJoker.
            Card representerar ett kort och CardHand en korthand. Sedan valde jag att skapa DeckOfCardsJoker som ärvde från DeckOfCards och la till två jokrar i kortleken.
            Parallellt jobbade jag med att mina sidor och följde övningen och föreläsning för att få alla bitarna att fungera.
            Jag fastnade sedan länge på JSON API kraven, hade svårt att förstå vad som behövde göras, men efter ett förtydligande förstod jag hur jag skulle ta mig vidare.
            Hade även problem med POST, men förstod efter hjälp från läraren och påminnelse av övningen att jag kunde skapa knappar som länkade till routes.
            Här återanvände jag mycket av koden jag skapat i mina sidor.
            <br>
            Som helhet är jag nöjd med min kod, evnetuell en förbättrinspotential i uppdelandet av klasser.
            Eftersom det är väldigt mycket att hålla koll på, underlättar det om man har en bra struktur.
        </p>

        <p>
            Att förstå hur klasser hänger ihop och hur flödet i ens kod är hjälper till och underlättar både vid skapandet av koden, men även när man behöver debugga.
            Det stödjer definitivt i problemlösningsprocessen och hur man ska strukturera koden i en applikation.
        </p>

        <p>
            Min TIL för detta kmom är att jag lärde mig hur man kan skapa en knapp för att använda sig utav POST och på det sättet visa upp JSON strukturer i webbläsaren.
        </p>
    </div>

    <a href="{{ path('report') }}#kmom03">Kmom03</a>

    <div id="kmom03">
        <p>Här är min redovisningstext för kmom03</p>

        <p>
            Att modellera ett kortspel med flödesdiagram bidrog till att jag innan jag började programmera kunde ha en klarare bild av hur jag skulle bygga upp koden.
            Det hjälpte mig även att kunna se hela bilden, vilket var hjälpsamt.
            Pseudokoden bidrog till att jag kunde ha en grund för de mindre delarna av flödesdiagrammet och med hjälp av det programmera koden.
            Jag anser att det undderlättade för mig vid start av uppgiften, men jag borde ha gått tillbaka och kollat på de i stunder där jag fastnade.
        </p>

        <p>
            Jag använde mig av dem klasserna jag skapat i tidigare uppgift: Card, DeckOfCards.
            Sedan skapade jag en ny klass Score där jag beräknade poängen för spelaren/bankiren och även jämförde poängen mellan spelarna för att utse en vinnare.
            
            För detta kmom valde jag att skapa en ny controller som skulle innehålla alla routes för spelet, det vill säga för startsidan/landningssidan, dokumentationen,
            init för att initiera spelet och sessionerna, spela, dra kort, bankiren drar kort och avsluta spelet.
            Flödet var enligt följande: man klickar på en länk 'Starta spelet' som leder till routen init.
            Där initieras sessionerna, alla spelarna får två kort som läggs till i deras lista/hand. Även kortlekens storlek beräknas.
            Denna route renderar html.twig sidan play där själva spelplanen för spelaren och två knappar (draw/end) visas.
            När spelaren klickar på draw knappen går den till routen draw och där dras ett kort som läggs till i spelaren hand och visas på sidan, även kortlekens storlek ändras.
            Routen redirectar till routen play som bara renderar samma html.twig, samma sida.
            När spelaren klickar på end knappen, skickas den till routen bankir_draw där bankiren drar kort så länge dess poäng är under 17, sessionerna uppdateras och den redirectar till routen end.
            I routen end beräknas spelaren och bankirens totala poäng och jämförs med hjälp av metoder i klassen Score och en vinnare utses.
            I min play.html.twig har jag med hjälp av en if-sats gjort så att när det finns en vinnare visas vinnaren och bankirens hand och totala poäng.
        </p>

        <p>
            Jag fastnade väldigt länge på detta kmom och tyckte det var väldigt många steg som behövde göras, vilket kändes överväldigande.
            Med tanke på det så är jag nöjd att jag lyckades ta mig igenom uppgiften och kraven.
            Förbättringspotentialen jag ser just nu är att göra controllern ännu tunnare och bryta ut och placera i klasser.
            Självklart vore det också snyggare om man kunde rita ut korten ordentligt med hjälp av bild istället för i formatet [A♦] som jag har gjort.
        </p>

        <p>
            En så länge tycker jag att det fortfarande är lite svårt att koda i ramverket Symfony.
            Man måste hålla koll på strukturen en hel del med templates, src, controller m.m.
            När man har jobbat ett tag och kommit in i det bättre tror jag att det kan vara ett kraftigt verktyg att ha.
        </p>

        <p>
            Min TIL för detta kmom är att jag lärde mig lite mer om hur flödesdiagram kan hjälpa och underlätta för en i ett tidigt skede i programmering.
        </p>
    </div>

    <a href="{{ path('report') }}#kmom04">Kmom04</a>

    <div id="kmom04">
        <p>Här är min redovisningstext för kmom04</p>
    </div>

    <a href="{{ path('report') }}#kmom05">Kmom05</a>

    <div id="kmom05">
        <p>Här är min redovisningstext för kmom05</p>
    </div>

    <a href="{{ path('report') }}#kmom06">Kmom06</a>

    <div id="kmom06">
        <p>Här är min redovisningstext för kmom06</p>
    </div>
{% endblock %}